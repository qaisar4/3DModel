/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, {useRef, useState,useEffect} from 'react';
import {useGLTF,useAnimations} from '@react-three/drei/native';
import * as THREE from 'three';
import {useFrame} from '@react-three/fiber/native';

export function ClientModel(props) {
  const {nodes, materials,animations} = useGLTF(require('../../assets/clientModel.glb'));

 


  const [isOpen, setIsOpen] = useState(false);
  const boxRef = useRef(null);
  const topRef=useRef(null)
  const bottomRef=useRef(null)

  const handleClick = () => {
    setIsOpen(!isOpen);
  };

  const { actions, names } = useAnimations(animations, boxRef);
  useEffect(() => {
    console.log("actions",actions)
    console.log("names",names)
    // console.log("names:",names,actions);
    // actions.ArmatureAction.play();
    // actions['Cube.001Action.001'].play();
    // actions['Armature.001Action'].play();
    // actions['CubeAction'].play();
    // actions['PlaneAction'].play();
    // actions['CylinderAction.001'].play();
  });

  // useEffect(()=>{
  //   console.log("useEffect Called",topRef.current.skeleton.bones[0].position)
  //   console.log("bones",topRef.current.skeleton.bones[0].position)
   
  //   if (topRef.current) {
  //     // topRef.current.skeleton.bones[0].rotation.x -= 1.20
  //     topRef.current.skeleton.bones[0].position.y -= .75
  //     topRef.current.skeleton.bones[0].position.z -= .75
    

  //   }


  // },[])
  // const lidRotation = useRef(0);

  // useFrame(() => {
  //   if (topRef.current && lidRotation.current < -1.20) {
  //     console.log("lidRotation.current",lidRotation.current)
  //     lidRotation.current -= 0.01; // Adjust the increment for desired animation speed
  //     topRef.current.skeleton.bones[0].rotation.x = lidRotation.current;
  //   }
  // });
  // useFrame(() => {
  //   if (topRef.current) {
  //     const skeleton = topRef.current.skeleton;
  //     const bone = skeleton.bones[0]; // Adjust the index to target the specific bone you want

  //     // Example: Animate the bone position
  //     bone.position.y += 0.01;
  //   }
  // });


  // useFrame(() => {
  //   if(topRef.current){
  //     console.log("topRef",topRef.current.position )
  //       topRef.current.position.y += .1; 
  //   }
 
  //   // move 0.02 units on the y-axis on each frame
  // });
  // useFrame(() => {
  //   if (topRef.current) {
  //     topRef.current.position.x += 0.01; // move 0.01 units on the x-axis on each frame
  //     topRef.current.position.y += 0.02; // move 0.02 units on the y-axis on each frame
  //   }
  // });


  return (
    <group {...props} dispose={null} ref={boxRef}>
      <group position={[0, 0.198, 0]} rotation={[Math.PI / 2, 0, 0]}>
        <skinnedMesh
          ref={bottomRef}
          geometry={nodes.Bottom_case.geometry}
          material={nodes.Bottom_case.material}
          skeleton={nodes.Bottom_case.skeleton}
        />

        <skinnedMesh
          ref={topRef}
          geometry={nodes.Top_case.geometry}
          material={nodes.Top_case.material}
          skeleton={nodes.Top_case.skeleton}
        />

        <primitive object={nodes.Top_bone} />
        <primitive object={nodes.Bottom_bone} />
      </group>
      <group position={[0, -0.09, 0.069]} rotation={[-Math.PI / 2, 0, 0]}>
        <primitive object={nodes.Bone} />
      </group>
    </group>
  );
}
